# -*- coding: utf-8 -*-
"""Crop Yield.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13rJqpmuZm8JXcauHwek5q8Tc2fNFqctA
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
import pickle



df = pd.read_csv('new (1).csv')

df.isnull().sum()

df.duplicated().sum()

def isStr(obj):
    try:
        float(obj)
        return False
    except:
        return True
to_drop = df[df['Annual_Rainfall'].apply(isStr)].index

df = df.drop(to_drop)

df

df['Annual_Rainfall'] = df['Annual_Rainfall'].astype(np.float64)

df.info()

crops = df['Crop'].unique()

col = ['Crop', 'Crop_Year','Season', 'State', 'Area', 'Production', 'Annual_Rainfall','Fertilizer','Pesticide','Yield']
df = df[col]
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0, shuffle=True)

X_train.head(1)

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder


ohe = OneHotEncoder(handle_unknown="ignore", sparse=False)


preprocesser = ColumnTransformer(
    transformers=[
        ("drop", "drop", ["Crop_Year"]),
        ("ohe", ohe, ["Crop", "Season", "State"]),
        ("passthrough", "passthrough", ["Area", "Production", "Annual_Rainfall", "Fertilizer", "Pesticide"]),
    ]
)

preprocesser

X_train_dummy = preprocesser.fit_transform(X_train)
X_test_dummy = preprocesser.transform(X_test)

preprocesser.get_feature_names_out(col[:-1])

from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error,r2_score


models = {
    'lr':LinearRegression(),
    'lss':Lasso(),
    'Rid':Ridge(),
    'Dtr':DecisionTreeRegressor()
}
for name, md in models.items():
    md.fit(X_train_dummy,y_train)
    y_pred = md.predict(X_test_dummy)

    print(f"{name} : mae : {mean_absolute_error(y_test,y_pred)} score : {r2_score(y_test,y_pred)}")

dtr = DecisionTreeRegressor()
dtr.fit(X_train_dummy,y_train)
dtr.predict(X_test_dummy)

pickle.dump(dtr,open('dtr.pkl','wb'))
pickle.dump(preprocesser,open('preprocessor.pkl','wb'))
